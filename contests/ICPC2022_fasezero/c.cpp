#include <bits/stdc++.h>
using namespace std;

const int MOD = 1e9+9;

int n, q;
long long consumo, res, aux;
const long long pot[61] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976};

long long solve(long long i, long long j){
	queue<array<long long, 3>> q;

	q.push({i, j, 0});
	while(1){
		array<long long, 3> u;
		u = q.front();
		q.pop();

		if(u[0] == 0) q.push({u[0], (u[1]*2)%consumo, u[2]+1});
		else if(u[1] == 0) q.push({(u[0]*2)%consumo, u[1], u[2]+1});
		else {
			q.push({u[0], (u[1]*2)%consumo, u[2]+1});
			q.push({(u[0]*2)%consumo, u[1], u[2]+1});
		}
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	cin >> n >> q;

	consumo = pot[n];
	res = 0;
	aux = 1;

	for(int k = 0; k < q; k++){
		long long i, j;
		cin >> i >> j;
		res += (solve(i, j)*aux)%MOD;
		aux *= n;
	}

	cout << res << endl;

	return 0;
}
